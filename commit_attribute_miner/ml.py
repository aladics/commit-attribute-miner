from sklearn import model_selection
from dataclasses import dataclass, field
from pathlib import Path
import subprocess
from util import get_resolved_path, get_last_changed_dir, save_pickle, parse_proc_stdout
from miner import get_cc2vec_attributes, get_projectkb_commits, create_dextend_codes, get_projectkb_commits_top_1
from config import get_config
from datetime import datetime

CONFIG = get_config()
N_FOLD = 10


@dataclass
class CC2Vec:
    root: Path
    dictionary_path: Path
    raw_train: Path
    raw_test: Path
    dextend_train: Path
    dextend_test: Path
    cc2vec_features_train: Path
    cc2vec_features_test: Path
    snapshot_dir: Path

    cc2vec_model: Path = field(init=False)
    dextend_model: Path = field(init=False)
    f1_score: float = field(init=False)

    def train_jit_cc2ftr(self) -> None:
        """
        Trains the feature generator model (cc2vec)
        :return: None
        """
        subprocess.run(["C:/Users/aladi/.pyenv/pyenv-win/versions/3.10.5/python", "jit_cc2ftr.py", "-train",
                        "-train_data", get_resolved_path(self.raw_train),
                        "-test_data", get_resolved_path(self.raw_test)], cwd=self.root, check=True)

        self.cc2vec_model = get_last_changed_dir(self.snapshot_dir) / "epoch_50.pt"

    def generate_cc2vec_features(self, src: Path, dst: Path):
        """
        Generates features using an already trained cc2vec model
        :param src: path to input from which the features will be generated (.pkl file)
        :param dst: the path to where the features will be saved (.pkl file)
        :return: None
        """
        subprocess.run(["C:/Users/aladi/.pyenv/pyenv-win/versions/3.10.5/python", "jit_cc2ftr.py", "-predict",
                        "-predict_data", get_resolved_path(src),
                        "-dictionary_data", get_resolved_path(self.dictionary_path),
                        "-load_model", get_resolved_path(self.cc2vec_model),
                        "-name", get_resolved_path(dst)], cwd=self.root)

    def train_jit(self) -> None:
        """
        Trains the jit model using the dextend features and the features generated by cc2vec
        :return: None
        """
        subprocess.run(["C:/Users/aladi/.pyenv/pyenv-win/versions/3.10.5/python", "jit_DExtended.py", "-train",
                        "-train_data", get_resolved_path(self.dextend_train),
                        "-train_data_cc2ftr", get_resolved_path(self.cc2vec_features_train),
                        "-dictionary_data", get_resolved_path(self.dictionary_path)], cwd=self.root)

        self.dextend_model = get_last_changed_dir(self.snapshot_dir) / "epoch_50.pt"

    def evaluate_jit(self) -> float:
        """
        Evaluates the performance by calculating auc and fmes on the train data
        :return: f1-score
        """
        proc = subprocess.run(["C:/Users/aladi/.pyenv/pyenv-win/versions/3.10.5/python", "jit_DExtended.py", "-predict",
                               "-pred_data", get_resolved_path(self.dextend_test),
                               "-pred_data_cc2ftr", get_resolved_path(self.cc2vec_features_test),
                               "-dictionary_data", get_resolved_path(self.dictionary_path),
                               "-load_model", get_resolved_path(self.dextend_model)],
                              cwd=self.root, capture_output=True, text=True)

        self.f1_score = parse_proc_stdout(proc.stdout)

    def run_jit(self):
        self.train_jit_cc2ftr()
        self.generate_cc2vec_features(self.raw_train, self.cc2vec_features_train)
        self.generate_cc2vec_features(self.raw_test, self.cc2vec_features_test)
        self.train_jit()
        self.evaluate_jit()


def get_local_cc2vec_instance() -> CC2Vec:
    return CC2Vec(root=Path("F:/work/kutatas/code_change_repr/compare_cgange_reprs/cc2vec"),
                  dictionary_path=Path(
                      "F:/work/kutatas/code_change_repr/compare_cgange_reprs/cc2vec/data/jit/openstack_dict"
                      ".pkl"),
                  raw_train=Path(CONFIG.data_train_path),
                  raw_test=Path(CONFIG.data_test_path),
                  dextend_train=Path(CONFIG.data_dextend_train_path),
                  dextend_test=Path(CONFIG.data_dextend_test_path),
                  cc2vec_features_train=Path("F:/work/kutatas/code_change_repr/compare_cgange_reprs/cc2vec/results"
                                             "/train_features_projectkb.pkl"),
                  cc2vec_features_test=Path("F:/work/kutatas/code_change_repr/compare_cgange_reprs/cc2vec/results"
                                            "/test_features_projectkb.pkl"),
                  snapshot_dir=Path("F:/work/kutatas/code_change_repr/compare_cgange_reprs/cc2vec/snapshot")
                  )


def save_input_data(selected_indicies, zipped_all_attributes, raw_save_path, dextend_save_path) -> None:
    attributes = tuple(zip(*[zipped_all_attributes[idx] for idx in selected_indicies]))
    save_pickle(attributes, raw_save_path)

    dextend_codes = create_dextend_codes(attributes[3])
    save_pickle((attributes[0], attributes[1], attributes[2], dextend_codes),
                dextend_save_path)


def crossvalidate_cc2vec():
    # get data for 10 fold:
    f1_scores = []
    cc2vec_attributes = get_cc2vec_attributes(get_projectkb_commits_top_1())
    zipped_cc2vec_attributes = list(zip(*cc2vec_attributes))
    kf = model_selection.KFold(n_splits=N_FOLD, shuffle=True)
    for train, test in kf.split(zipped_cc2vec_attributes):
        save_input_data(train, zipped_cc2vec_attributes, Path(CONFIG.data_train_path),
                        Path(CONFIG.data_dextend_train_path))
        save_input_data(test, zipped_cc2vec_attributes, Path(CONFIG.data_test_path),
                        Path(CONFIG.data_dextend_test_path))

        cc2vec_instance = get_local_cc2vec_instance()
        cc2vec_instance.run_jit()
        f1_scores.append(cc2vec_instance.f1_score)

    current_date_str = datetime.now().strftime("%y_%m_%d")
    save_pickle(f1_scores, Path(CONFIG.f1_scores_dir_path) / f"f1_scores_{current_date_str}.pkl")
    return


if __name__ == "__main__":
    crossvalidate_cc2vec()
